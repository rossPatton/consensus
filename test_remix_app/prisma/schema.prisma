generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider           = "zod-prisma-types"
  createPartialTypes = "true"
  useTypeAssertions  = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          Int        @id @default(autoincrement())
  display     String     @default("") @db.VarChar(255)
  slug        String     @unique(map: "categories_slug_idx") @default("") @db.VarChar(255)
  uuid        String     @unique(map: "categories_uuid_idx") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created     DateTime   @default(now()) @db.Timestamp(6)
  updated     DateTime   @default(now()) @db.Timestamp(6)
  description String     @default("") @db.VarChar(1000)
  groups      Groups[]
  meetings    Meetings[]

  @@map("categories")
}

model Decisions {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(6)
  updated DateTime @default(now()) @db.Timestamp(6)
  uuid    String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@map("decisions")
}

model Groups {
  id          Int        @id @default(autoincrement())
  category    String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String     @default("") @db.VarChar(1000)
  memberName  String     @default("member") @db.VarChar(255)
  modName     String     @default("facilitator") @db.VarChar(255)
  privacyType String     @default("private") @db.VarChar(255)
  created     DateTime   @default(now()) @db.Timestamp(6)
  updated     DateTime   @default(now()) @db.Timestamp(6)
  uuid        String     @unique(map: "groups_uuid_idx") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @default("") @db.VarChar(255)
  slug        String     @default("") @db.VarChar(255)
  categories  Categories @relation(fields: [category], references: [uuid])
  meetings    Meetings[]

  @@map("groups")
}

model Meetings {
  id           Int            @id @default(autoincrement())
  created      DateTime       @default(now()) @db.Timestamp(6)
  updated      DateTime       @default(now()) @db.Timestamp(6)
  category     String         @db.Uuid
  description  String         @default("") @db.VarChar(1000)
  title        String         @default("") @db.VarChar(255)
  group        String         @db.Uuid
  type         meeting_types  @default(Meeting)
  location     String         @default("") @db.VarChar(255)
  locationLink String         @default("") @db.VarChar(255)
  status       meeting_status @default(Draft)
  slug         String         @default("") @db.VarChar(255)
  datetime     DateTime       @db.Timestamp(6)
  host         String         @db.Uuid
  duration     Int            @db.SmallInt
  uuid         String         @unique(map: "meetings_uuid_idx") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categories   Categories     @relation(fields: [category], references: [uuid])
  groups       Groups         @relation(fields: [group], references: [uuid])
  users        Users          @relation(fields: [host], references: [uuid])
  rsvps        RSVPS[]

  @@map("meetings")
}

model RSVPS {
  id       Int         @id @default(autoincrement())
  uuid     String      @unique(map: "rsvps_uuid_idx") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user     String      @db.Uuid
  meeting  String      @db.Uuid
  value    rsvp_status @default(Yes)
  type     rsvp_type   @default(private)
  created  DateTime    @default(now()) @db.Timestamp(6)
  updated  DateTime    @default(now()) @db.Timestamp(6)
  meetings Meetings    @relation(fields: [meeting], references: [uuid])
  users    Users       @relation(fields: [user], references: [uuid])

  @@map("rsvps")
}

model Users {
  id       Int        @id @default(autoincrement())
  type     String     @default("") @db.VarChar(255)
  uuid     String     @unique(map: "users_uuid_idx") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created  DateTime   @default(now()) @db.Timestamp(6)
  updated  DateTime   @default(now()) @db.Timestamp(6)
  meetings Meetings[]
  rsvps    RSVPS[]

  @@map("users")
}

enum meeting_status {
  Draft
  Public
  Private
  Deleted
}

enum meeting_types {
  Meeting
  March
  Rally
  Direct_Action @map("Direct Action")
  Protest
  Strike
  Picket
  Vote
  Election
}

enum rsvp_status {
  Yes
  No
  Maybe
}

enum rsvp_type {
  public
  private
}
